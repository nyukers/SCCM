// 👈 We have automatically added the "Samples" database to your connection pane.
//    It contains sample data sets that you can use to run KQL queries and get a "feel" for the language.
// 🏃‍♂️ You can run a query by placing the cursor anywhere on the query text and clicking the run button (or Shift + Enter).
// 📄 KQL overview https://docs.microsoft.com/en-us/azure/data-explorer/kusto/query/ 
// 📃 Quick KQL reference guide can be found here https://docs.microsoft.com/en-us/azure/data-explorer/kql-quick-reference
//
// Start by browsing data in the StormEvents table, and view a small sample of records
// - Most queries start with a table name (in this case StormEvents that contains U.S weather data).
// - The "take" operator will return the specified number of rows (in this case 10) from the table (not necessarily in order).
StormEvents
| take 10
// Create a calculated column by computing a value for every row
// - The "extend" operator adds a new calculated column.
// - The "project" operator selects the columns to include in the result

StormEvents
| take 5
| extend Duration = EndTime - StartTime                      
| project StartTime, EndTime, Duration, EventType, State;    

StormEvents
| where StartTime > datetime(2007-02-01) and StartTime < datetime(2007-03-01)
| where EventType == 'Flood' and State == 'CALIFORNIA'
| project StartTime, EndTime , State , EventType , EpisodeNarrative

StormEvents | take 5 | project  StartTime, EndTime, EventType, State, EventNarrative
StormEvents | limit 5 | extend Duration = EndTime - StartTime | project StartTime, EndTime, Duration, EventType, State

// Use aggregation functions 
// - The "summarize" operator calculates aggregations. You can use several aggregation functions in one summarize operator
// - The "top" operator returns the first N rows of the dataset when the dataset is sorted
StormEvents 
| summarize StormCount = count(), TypeOfStorms = dcount(EventType) by State     
| top 5 by StormCount desc

// Visualize the data by rendering charts
// - The "render" operator visualizes query result as a chart. It should be the last operator in a query. 
StormEvents
| where EventType =="Flood"
| summarize EventCount = count() by State 
| where EventCount > 100
| render piechart

StormEvents 
| summarize event_count=count(), mid = avg(BeginLat) by State 
| sort by mid
| where event_count > 1800
| project State, event_count
| render columnchart

StormEvents
| summarize event_count=count() by bin(StartTime, 1d)
| render timechart

StormEvents 
| where StartTime > datetime(2007-06-04) and StartTime < datetime(2007-06-10) 
| where Source in ("Source","Public","Emergency Manager","Trained Spotter","Law Enforcement")
| summarize count() by bin(StartTime, 10h), Source
| render timechart  

StormEvents
| extend hour = floor(StartTime % 1d , 1h)
| summarize event_count=count() by hour
| sort by hour asc
| render columnchart

StormEvents
| extend hour= floor( StartTime % 1d , 1h) / 1h
| where State in ("GULF OF MEXICO","MAINE","VIRGINIA","WISCONSIN","NORTH DAKOTA","NEW JERSEY","OREGON")
| summarize event_count=count() by hour, State
| render columnchart

StormEvents
| where EventType == "Lightning"
| join (
    StormEvents 
    | where EventType == "Avalanche"
) on State  
| distinct State


StormEvents
| extend  duration = EndTime - StartTime
| where duration > 0s
| where duration < 3h
| summarize event_count = count()
    by bin(duration, 5m)
| sort by duration asc
| render timechart

StormEvents
| extend  duration = EndTime - StartTime
| where duration > 0s
| where duration < 3h
| summarize event_count = count()
    by bin(duration, 5m), State
| sort by duration asc
| summarize percentiles(duration, 5, 20, 50, 80, 95) by State

let LightningStorms = 
    StormEvents
    | where EventType == "Lightning";
let AvalancheStorms = 
    StormEvents
    | where EventType == "Avalanche";
LightningStorms 
| join (AvalancheStorms) on State
| distinct State

 

